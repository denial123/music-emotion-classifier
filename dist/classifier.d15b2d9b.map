{"version":3,"sources":["scripts\\classifier.ts"],"names":[],"mappings":"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","file":"classifier.d15b2d9b.map","sourceRoot":"..","sourcesContent":["'use strict';\r\n\r\nimport * as dataset from \"../data/Emotion_data.json\";\r\nimport * as toClassify from \"../toClassify/Emotion_features.json\";\r\n\r\n// const Classifier = (p) => {\r\nlet data;\r\nlet songsToClassify;\r\nconst featuresList = [\r\n    \"tempo\",\r\n    \"total_beats\",\r\n    \"average_beats\",\r\n    \"chroma_stft_mean\",\r\n    \"chroma_stft_std\",\r\n    \"chroma_stft_var\",\r\n    \"chroma_cq_mean\",\r\n    \"chroma_cq_std\",\r\n    \"chroma_cq_var\",\r\n    \"chroma_cens_mean\",\r\n    \"chroma_cens_std\",\r\n    \"chroma_cens_var\",\r\n    \"melspectrogram_mean\",\r\n    \"melspectrogram_std\",\r\n    \"melspectrogram_var\",\r\n    \"mfcc_mean\",\r\n    \"mfcc_std\",\r\n    \"mfcc_var\",\r\n    \"mfcc_delta_mean\",\r\n    \"mfcc_delta_std\",\r\n    \"mfcc_delta_var\",\r\n    \"rmse_mean\",\r\n    \"rmse_std\",\r\n    \"rmse_var\",\r\n    \"cent_mean\",\r\n    \"cent_std\",\r\n    \"cent_var\",\r\n    \"spec_bw_mean\",\r\n    \"spec_bw_std\",\r\n    \"spec_bw_var\",\r\n    \"contrast_mean\",\r\n    \"contrast_std\",\r\n    \"contrast_var\",\r\n    \"rolloff_mean\",\r\n    \"rolloff_std\",\r\n    \"rolloff_var\",\r\n    \"poly_mean\",\r\n    \"poly_std\",\r\n    \"poly_var\",\r\n    \"tonnetz_mean\",\r\n    \"tonnetz_std\",\r\n    \"tonnetz_var\",\r\n    \"zcr_mean\",\r\n    \"zcr_std\",\r\n    \"zcr_var\",\r\n    \"harm_mean\",\r\n    \"harm_std\",\r\n    \"harm_var\",\r\n    \"perc_mean\",\r\n    \"perc_std\",\r\n    \"perc_var\",\r\n    \"frame_mean\",\r\n    \"frame_std\",\r\n    \"frame_var\"\r\n]; // all sound features, inputs\r\nlet featuresMinMax = [];\r\n\r\n\r\nsetup();\r\n\r\nfunction setup() {\r\n    console.log(\"hello\");\r\n\r\n    data = loadJSON(dataset, () => {\r\n        songsToClassify = loadJSON(toClassify, () => {\r\n            let songs = [];\r\n            for (let i=0; i<featuresList.length; i++) {\r\n                getMinMaxValues(featuresList[i]);\r\n            }\r\n            console.log(featuresMinMax);\r\n        });\r\n    });\r\n\r\n\r\n\r\n}\r\n\r\nfunction loadJSON(url, callback) {\r\n\r\n    let xobj = new XMLHttpRequest();\r\n    xobj.overrideMimeType(\"application/json\");\r\n    xobj.open('GET', url, true); // Replace 'my_data' with the path to your file\r\n    xobj.onreadystatechange = () => {\r\n        if (xobj.readyState == 4 && xobj.status == \"200\") {\r\n            // Required use of an anonymous callback as .open will NOT return a value but simply returns undefined in asynchronous mode\r\n            callback(xobj.responseText);\r\n        }\r\n    };\r\n    xobj.send(null);\r\n}\r\n\r\n\r\nfunction getMinMaxValues(feature) {\r\n    let maxValue = 0;\r\n    let minValue = 0;\r\n    let counter = 0;\r\n\r\n    for (const song in data) {\r\n        let value = data[song][feature];\r\n        if (counter === 0) {\r\n            maxValue = value;\r\n            minValue = value;\r\n        }\r\n        if (value > maxValue) {\r\n            maxValue = value;\r\n        }\r\n        if (value < minValue) {\r\n            minValue = value;\r\n        }\r\n        counter++;\r\n    }\r\n\r\n    featuresMinMax.push({\r\n        \"feature\": feature,\r\n        \"min\": minValue,\r\n        \"max\": maxValue\r\n    });\r\n}\r\n\r\n\r\n\r\n"]}