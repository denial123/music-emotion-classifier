{"version":3,"sources":["scripts\\ShapeData.ts","scripts\\classifier.ts"],"names":[],"mappings":"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","file":"classifier.d15b2d9b.map","sourceRoot":"..","sourcesContent":["// Gathers all functions used to make the dataset ok for tensors\r\n\r\nexport class ShapeData {\r\n\r\n    featuresList = [\r\n        \"tempo\",\r\n        \"total_beats\",\r\n        \"average_beats\",\r\n        \"chroma_stft_mean\",\r\n        \"chroma_stft_std\",\r\n        \"chroma_stft_var\",\r\n        \"chroma_cq_mean\",\r\n        \"chroma_cq_std\",\r\n        \"chroma_cq_var\",\r\n        \"chroma_cens_mean\",\r\n        \"chroma_cens_std\",\r\n        \"chroma_cens_var\",\r\n        \"melspectrogram_mean\",\r\n        \"melspectrogram_std\",\r\n        \"melspectrogram_var\",\r\n        \"mfcc_mean\",\r\n        \"mfcc_std\",\r\n        \"mfcc_var\",\r\n        \"mfcc_delta_mean\",\r\n        \"mfcc_delta_std\",\r\n        \"mfcc_delta_var\",\r\n        \"rmse_mean\",\r\n        \"rmse_std\",\r\n        \"rmse_var\",\r\n        \"cent_mean\",\r\n        \"cent_std\",\r\n        \"cent_var\",\r\n        \"spec_bw_mean\",\r\n        \"spec_bw_std\",\r\n        \"spec_bw_var\",\r\n        \"contrast_mean\",\r\n        \"contrast_std\",\r\n        \"contrast_var\",\r\n        \"rolloff_mean\",\r\n        \"rolloff_std\",\r\n        \"rolloff_var\",\r\n        \"poly_mean\",\r\n        \"poly_std\",\r\n        \"poly_var\",\r\n        \"tonnetz_mean\",\r\n        \"tonnetz_std\",\r\n        \"tonnetz_var\",\r\n        \"zcr_mean\",\r\n        \"zcr_std\",\r\n        \"zcr_var\",\r\n        \"harm_mean\",\r\n        \"harm_std\",\r\n        \"harm_var\",\r\n        \"perc_mean\",\r\n        \"perc_std\",\r\n        \"perc_var\",\r\n        \"frame_mean\",\r\n        \"frame_std\",\r\n        \"frame_var\"\r\n    ]; // all sound features, inputs\r\n\r\n    // I want to be able to ignore certain features, like total_beats, because it could be irrelevant\r\n    // But for now it makes a mess with the arrays, so don't use it\r\n    featuresToIgnore = [\r\n        // \"total_beats\",\r\n        // \"chroma_stft_std\"\r\n    ];\r\n\r\n\r\n    makeDatasetForTensors(data: object): Array<Array<any>> {\r\n        let dataInputs = [];\r\n        let dataOutputs = [];\r\n        for (const singleSong in data) {\r\n            let newArray = this.convertObjectToArray(data[singleSong]);\r\n            const input = newArray.splice(4); // all the features\r\n            const output = newArray.splice(2, 1); // the label like \"relax\" or \"happy\"\r\n            dataInputs.push(input);\r\n            dataOutputs.push(output);\r\n        }\r\n\r\n        dataInputs = this.removeFeatures(dataInputs);\r\n\r\n        return [\r\n            dataInputs,\r\n            dataOutputs\r\n        ];\r\n    };\r\n\r\n    makeUnclassifiedSongsForTensors(originalData, songsToClassify: object) {\r\n        let enumFeatures = this.convertObjectToArray(songsToClassify);\r\n        let numberOfSongs = Object.keys(enumFeatures[0]).length;\r\n        let songNames = [];\r\n        let allFeatures = [];\r\n\r\n        for (let i=1; i<numberOfSongs+1; i++) {\r\n            let songName = \"\";\r\n            let singleSongFeatures = [];\r\n            for (let j=0; j<enumFeatures.length; j++) {\r\n                if (j === 0) {\r\n                    songName = enumFeatures[j][i];\r\n                } else {\r\n                    singleSongFeatures.push(enumFeatures[j][i]);\r\n                }\r\n            }\r\n            songNames.push(songName);\r\n            allFeatures.push(singleSongFeatures);\r\n        }\r\n\r\n        // console.log(\"norm\", this.normalizeData(originalData, allFeatures));\r\n\r\n        allFeatures = this.removeFeatures(allFeatures);\r\n\r\n        // We return the normalized features\r\n        return [\r\n            songNames,\r\n            this.normalizeData(originalData, allFeatures)\r\n        ];\r\n    }\r\n\r\n    getInputDim(): number {\r\n        return this.featuresList.length - this.featuresToIgnore.length;\r\n    }\r\n\r\n    removeFeatures(features: Array<Array<number>>): Array<Array<number>> {\r\n\r\n        for (const song in features) {\r\n            // console.log(features[song]);\r\n            for (let f=0; f<this.featuresToIgnore.length; f++) {\r\n                let featureIndex = this.featuresList.indexOf(this.featuresToIgnore[f]);\r\n                features[song].splice(featureIndex, 1);\r\n            }\r\n        }\r\n\r\n        return features;\r\n    }\r\n\r\n    convertObjectToArray(data: object): Array<Array<any>> {\r\n        // Converts the object to an iterable object\r\n        let newArray = [];\r\n        for(let [key, value] of Object.entries(data)) {\r\n            if (!Object.entries)\r\n                Object.entries = function( obj ){\r\n                    var ownProps = Object.keys( obj ),\r\n                        i = ownProps.length,\r\n                        resArray = new Array(i); // preallocate the Array\r\n                    while (i--)\r\n                        resArray[i] = [ownProps[i], obj[ownProps[i]]];\r\n                    if (i<ownProps.length-3) {\r\n                        return resArray;\r\n                    }\r\n                };\r\n            newArray.push(value); // add each feature to an array\r\n            // console.log(key, value); // \"first\", \"one\"\r\n        }\r\n        // Returns an array with\r\n        // [0] List of features\r\n        // [1] Label (\"relax\", \"calm\"...)\r\n        return newArray;\r\n    };\r\n\r\n    normalizeData(originalData: object, arrayLikeData: object): Array<Array<number>> {\r\n\r\n        // console.log(`originaldata: `, originalData);\r\n        // console.log(`arraylikedata: `, arrayLikeData);\r\n\r\n        let normalizedData = [];\r\n\r\n\r\n        let featuresRange = this.getMinMaxValues(originalData);\r\n        // console.log(featuresRange);\r\n\r\n        for (const song in arrayLikeData) {\r\n            let singleNormalizedData = [];\r\n            for (let i=0; i<arrayLikeData[song].length; i++) {\r\n                // console.log(`featuresRange[i]`, featuresRange[i].feature);\r\n                let norm = this.normalize(arrayLikeData[song][i], featuresRange[i].min, featuresRange[i].max);\r\n                // console.log(norm);\r\n                singleNormalizedData.push(norm);\r\n            }\r\n            normalizedData.push(singleNormalizedData);\r\n        }\r\n\r\n        // for (const song in arrayLikeData) {\r\n        //     let singleNormalizedData = [];\r\n        //     for (let i=0; i<arrayLikeData[song].length; i++) {\r\n        //         let norm = this.normalize(arrayLikeData[song][i], featuresRange[i].min, featuresRange[i].max);\r\n        //         console.log(norm);\r\n        //         singleNormalizedData.push(norm);\r\n        //     }\r\n        //     normalizedData.push(singleNormalizedData);\r\n        // }\r\n        return normalizedData;\r\n\r\n\r\n    };\r\n\r\n    normalize(value: number, minValue: number, maxValue: number): number {\r\n        // console.log(`value: ${value}`, `minValue: ${minValue}`, `maxValue: ${maxValue}`, `result: ${(value-minValue)/(maxValue-minValue)}`)\r\n        return (value-minValue)/(maxValue-minValue);\r\n    }\r\n\r\n    getMinMaxValues(data: object): object {\r\n\r\n        let featuresMinMax = []; // to store the min and max value used for normalizing the inputs\r\n\r\n        for (let i=0; i<this.featuresList.length; i++) {\r\n            let maxValue = 0;\r\n            let minValue = 0;\r\n            let counter = 0;\r\n\r\n            for (const song in data) {\r\n                let value = data[song][this.featuresList[i]];\r\n\r\n                if (counter === 0) {\r\n                    maxValue = value;\r\n                    minValue = value;\r\n                }\r\n                if (value > maxValue) {\r\n                    maxValue = value;\r\n                }\r\n                if (value < minValue) {\r\n                    minValue = value;\r\n                }\r\n                counter++;\r\n            }\r\n\r\n            featuresMinMax.push({\r\n                \"feature\": this.featuresList[i],\r\n                \"min\": minValue,\r\n                \"max\": maxValue\r\n            });\r\n        }\r\n\r\n        // console.log(`featuresMinMax:`, featuresMinMax)\r\n        return featuresMinMax;\r\n\r\n    }\r\n\r\n\r\n    isIterable(obj) {\r\n        console.log(obj);\r\n        // checks for null and undefined\r\n        if (obj == null) {\r\n            return false;\r\n        }\r\n        return typeof obj[Symbol.iterator] === 'function';\r\n    }\r\n\r\n}","'use strict';\r\n\r\n// -------- Options --------\r\nconst epochs = 30;\r\nconst learningRate = 0.3;\r\nconst validationSplit = 0.2;\r\nconst unitsHiddenLayer = 50;\r\nconst hiddenLayerActivation = \"relu\";\r\nconst outputLayerActivation = \"softmax\";\r\n\r\n\r\n// Import data\r\nimport * as dataset from \"../data/Emotion_data.json\";\r\nimport * as toClassify from \"../toClassify/Emotion_features.json\";\r\n\r\n// Import functions to convert data\r\nimport * as SD from \"./ShapeData\";\r\nconst ShapeData = new SD.ShapeData;\r\n\r\n// const Classifier = (p) => {\r\nlet data = {};\r\nlet songsToClassify = {};\r\nlet dataInputs = []; // The output of dataInputs[0] is dataOutputs[0]\r\nlet labelList = [\"sad\", \"happy\", \"relax\", \"angry\"];\r\n\r\nlet labels = []; // hot encoded values 0, 1, 2 or 3\r\nlet normalizedData = [];\r\n\r\nlet model;\r\n\r\nsetup();\r\n\r\nfunction setup(): void {\r\n\r\n    // We have to use .default to load the url correctly with parcel\r\n    loadJSON(dataset.default)\r\n        .then((jsonDataset) => {\r\n            data = JSON.parse(jsonDataset);\r\n            return loadJSON(toClassify.default);\r\n        })\r\n        .then((jsonSongs) => {\r\n            songsToClassify = JSON.parse(jsonSongs);\r\n            let toClassify = ShapeData.makeUnclassifiedSongsForTensors(data, songsToClassify);\r\n            let songNames = toClassify[0];\r\n            let songFeatures = toClassify[1];\r\n            // console.log(songFeatures[0]);\r\n\r\n            // ---|-- Building the model ------|-----\r\n            // ---v----------------------------v-----\r\n\r\n            let newData = ShapeData.makeDatasetForTensors(data);\r\n            dataInputs = newData[0];\r\n            let dataOutputs = newData[1]; // the outputs are \"relax\", \"calm\"...\r\n\r\n            for (let i=0; i<dataOutputs.length; i++) {\r\n                // in the label list we put the hot encoded values like 0, 1, 2 or 3\r\n                labels.push(labelList.indexOf(dataOutputs[i][0]));\r\n            }\r\n\r\n            // Transform the value of each feature into a 0 to 1 range\r\n            normalizedData = ShapeData.normalizeData(data, dataInputs);\r\n            // console.log(normalizedData);\r\n\r\n            let xs = tf.tensor2d(normalizedData);\r\n            let labelsTensor = tf.tensor1d(labels, \"int32\"); // makes a tensor with the labels\r\n            let ys = tf.oneHot(labelsTensor, labelList.length); // defines the outputs\r\n            labelsTensor.dispose(); // for memory management, as we don't need anymore, we use dispose()\r\n\r\n            let inputDim = ShapeData.getInputDim();\r\n\r\n            model = tf.sequential();\r\n            let hiddenLayer = tf.layers.dense({\r\n                units: unitsHiddenLayer,\r\n                activation: hiddenLayerActivation,\r\n                inputDim: inputDim\r\n            });\r\n            let outputLayer = tf.layers.dense({\r\n                units: 4,\r\n                activation: outputLayerActivation\r\n            });\r\n            model.add(hiddenLayer);\r\n            model.add(outputLayer);\r\n\r\n            // Create an optimizer\r\n            const learningR = learningRate;\r\n            const myOptimizer = tf.train.sgd(learningR);\r\n\r\n            model.compile({\r\n                optimizer: myOptimizer,\r\n                loss: \"categoricalCrossentropy\",\r\n                metrics: [\"accuracy\"]\r\n            });\r\n\r\n            train(xs, ys).then( (result) => {\r\n                // console.log(result);\r\n                tf.tidy( () => {\r\n\r\n                    for (const song in songFeatures) {\r\n                        // toGuess = input\r\n                        const toGuess = tf.tensor2d([songFeatures[song]]);\r\n                        // console.log(`song features:`, songFeatures[song]);\r\n                        let results = model.predict(toGuess);\r\n                        let argMax = results.argMax(1);\r\n                        let index = argMax.dataSync()[0];\r\n                        let label = labelList[index];\r\n                        model.getWeights();\r\n                        console.log(`I think that ${songNames[song]} is a ${label} song`);\r\n                    }\r\n\r\n                    // const indexToGuess = 4;\r\n                    // const toGuess = tf.tensor2d([songFeatures[indexToGuess]]);\r\n                    // let results = model.predict(toGuess);\r\n                    // let index = results.argMax(1).dataSync()[0];\r\n                    // let label = labelList[index];\r\n                    // model.getWeights();\r\n                    // console.log(songNames[indexToGuess]);\r\n                    // console.log(label);\r\n                });\r\n\r\n            });\r\n\r\n\r\n        })\r\n        .catch((err) => console.log(err));\r\n    // songsToClassify = loadJSON(toClassify, () => {\r\n\r\n}\r\n\r\nasync function train(xs, ys) {\r\n\r\n    const options = {\r\n        epochs: epochs, // number of times it iterates over training data\r\n        validationSplit: validationSplit,\r\n        shuffle: true,\r\n        callbacks: {\r\n            onTrainBegin: () => console.log(\"training start\"),\r\n            onTrainEnd: () => console.log(\"training complete\"),\r\n            onEpochEnd: (num, logs) => {\r\n                console.log(`Epoch: ${num}`);\r\n                console.log(logs);\r\n            }\r\n        }\r\n        // shuffle\r\n    };\r\n\r\n    return await model.fit(xs, ys, options);\r\n}\r\n\r\n\r\n\r\nfunction makeInputs(): void {\r\n    let features = [];\r\n    for (let singleSong of data) {\r\n        for (let singleFeature of data[singleSong]) {\r\n            console.log(data[singleSong][singleFeature]);\r\n        }\r\n    }\r\n}\r\n\r\nfunction loadJSON(url: string): Promise<any> {\r\n\r\n    return new Promise((resolve, reject) => {\r\n        let xobj = new XMLHttpRequest();\r\n        xobj.overrideMimeType(\"application/json\");\r\n        xobj.open('GET', url, true); // Replace 'my_data' with the path to your file\r\n        xobj.onreadystatechange = () => {\r\n            if (xobj.readyState == 4 && xobj.status == 200) {\r\n                resolve(xobj.responseText);\r\n            }\r\n        };\r\n        xobj.send(null);\r\n        xobj.onerror = () => reject(xobj.statusText);\r\n    });\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n"]}