{"version":3,"sources":["scripts\\classifier.js"],"names":["dataset","toClassify","data","songsToClassify","featuresList","featuresMinMax","setup","console","log","loadJSON","songs","i","length","getMinMaxValues","url","callback","xobj","XMLHttpRequest","overrideMimeType","open","onreadystatechange","readyState","status","responseText","send","feature","maxValue","minValue","counter","song","value","push"],"mappings":"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","file":"classifier.fa182030.map","sourceRoot":"..","sourcesContent":["'use strict';\r\n\r\nimport * as dataset from \"../data/Emotion_data.json\";\r\nimport * as toClassify from \"../toClassify/Emotion_features.json\";\r\n\r\n// const Classifier = (p) => {\r\nlet data;\r\nlet songsToClassify;\r\nconst featuresList = [\r\n    \"tempo\",\r\n    \"total_beats\",\r\n    \"average_beats\",\r\n    \"chroma_stft_mean\",\r\n    \"chroma_stft_std\",\r\n    \"chroma_stft_var\",\r\n    \"chroma_cq_mean\",\r\n    \"chroma_cq_std\",\r\n    \"chroma_cq_var\",\r\n    \"chroma_cens_mean\",\r\n    \"chroma_cens_std\",\r\n    \"chroma_cens_var\",\r\n    \"melspectrogram_mean\",\r\n    \"melspectrogram_std\",\r\n    \"melspectrogram_var\",\r\n    \"mfcc_mean\",\r\n    \"mfcc_std\",\r\n    \"mfcc_var\",\r\n    \"mfcc_delta_mean\",\r\n    \"mfcc_delta_std\",\r\n    \"mfcc_delta_var\",\r\n    \"rmse_mean\",\r\n    \"rmse_std\",\r\n    \"rmse_var\",\r\n    \"cent_mean\",\r\n    \"cent_std\",\r\n    \"cent_var\",\r\n    \"spec_bw_mean\",\r\n    \"spec_bw_std\",\r\n    \"spec_bw_var\",\r\n    \"contrast_mean\",\r\n    \"contrast_std\",\r\n    \"contrast_var\",\r\n    \"rolloff_mean\",\r\n    \"rolloff_std\",\r\n    \"rolloff_var\",\r\n    \"poly_mean\",\r\n    \"poly_std\",\r\n    \"poly_var\",\r\n    \"tonnetz_mean\",\r\n    \"tonnetz_std\",\r\n    \"tonnetz_var\",\r\n    \"zcr_mean\",\r\n    \"zcr_std\",\r\n    \"zcr_var\",\r\n    \"harm_mean\",\r\n    \"harm_std\",\r\n    \"harm_var\",\r\n    \"perc_mean\",\r\n    \"perc_std\",\r\n    \"perc_var\",\r\n    \"frame_mean\",\r\n    \"frame_std\",\r\n    \"frame_var\"\r\n]; // all sound features, inputs\r\nlet featuresMinMax = [];\r\n\r\n\r\nsetup();\r\n\r\nfunction setup() {\r\n    console.log(\"hello\");\r\n\r\n    data = loadJSON(dataset, () => {\r\n        songsToClassify = loadJSON(toClassify, () => {\r\n            let songs = [];\r\n            for (let i=0; i<featuresList.length; i++) {\r\n                getMinMaxValues(featuresList[i]);\r\n            }\r\n            console.log(featuresMinMax);\r\n        });\r\n    });\r\n\r\n\r\n\r\n}\r\n\r\nfunction loadJSON(url, callback) {\r\n\r\n    let xobj = new XMLHttpRequest();\r\n    xobj.overrideMimeType(\"application/json\");\r\n    xobj.open('GET', url, true); // Replace 'my_data' with the path to your file\r\n    xobj.onreadystatechange = () => {\r\n        if (xobj.readyState == 4 && xobj.status == \"200\") {\r\n            // Required use of an anonymous callback as .open will NOT return a value but simply returns undefined in asynchronous mode\r\n            callback(xobj.responseText);\r\n        }\r\n    };\r\n    xobj.send(null);\r\n}\r\n\r\n\r\nfunction getMinMaxValues(feature) {\r\n    let maxValue = 0;\r\n    let minValue = 0;\r\n    let counter = 0;\r\n\r\n    for (const song in data) {\r\n        let value = data[song][feature];\r\n        if (counter === 0) {\r\n            maxValue = value;\r\n            minValue = value;\r\n        }\r\n        if (value > maxValue) {\r\n            maxValue = value;\r\n        }\r\n        if (value < minValue) {\r\n            minValue = value;\r\n        }\r\n        counter++;\r\n    }\r\n\r\n    featuresMinMax.push({\r\n        \"feature\": feature,\r\n        \"min\": minValue,\r\n        \"max\": maxValue\r\n    });\r\n}\r\n\r\n\r\n\r\n"]}